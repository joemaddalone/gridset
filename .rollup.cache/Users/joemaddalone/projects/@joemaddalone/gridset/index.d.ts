import { GridSettings, IGridset } from './gridset.d';
export default class Gridset implements IGridset {
    col: Function;
    row: Function;
    diagonal: Function;
    antidiagonal: Function;
    area: Function;
    areaByCell: Function;
    settings: GridSettings;
    constructor({ width, height, rows, cols, cellWidth, cellHeight, }: {
        width?: number | undefined;
        height?: number | undefined;
        rows?: number | undefined;
        cols?: number | undefined;
        cellWidth?: null | undefined;
        cellHeight?: null | undefined;
    });
    get cells(): import("./gridset.d").Area;
    get cols(): import("./gridset.d").Area;
    get rows(): import("./gridset.d").Area;
    get flatCells(): (import("./gridset.d").Cell | null)[];
    cell(ci: number, ri: number): {
        _u: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _lu: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _ru: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _d: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _ld: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _rd: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _r: (mode: string) => import("./gridset.d").Cell | null | undefined;
        _l: (mode: string) => import("./gridset.d").Cell | null | undefined;
        x: number;
        y: number;
        t: number;
        l: number;
        b: number;
        r: number;
        w: number;
        h: number;
        cx: number;
        cy: number;
        ci: number;
        ri: number;
    } | null;
    rowCells(ri: number): import("./gridset.d").CellArray;
    colCells(ci: number): import("./gridset.d").CellArray;
    scanCells(cells?: (import("./gridset.d").Cell | null)[], dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    cycleCells(cells?: (import("./gridset.d").Cell | null)[], dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    scanRow(ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    scanDiagonal(ci: number, ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    scanAntidiagonal(ci: number, ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    scanCol(ci: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    cycleRow(ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    cycleCol(ci: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    cycleDiagonal(ci: number, ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    cycleAntidiagonal(ci: number, ri: number, dir?: string, si?: null): Generator<import("./gridset.d").Cell | null | undefined, never, unknown>;
    bounce(area: import("./gridset.d").Area | undefined, sx: number, sy: number, mx: number, my: number): Generator<import("./gridset.d").Cell | 0, never, unknown>;
    get width(): number;
    get height(): number;
    get rowCount(): number;
    get colCount(): number;
    get cellWidth(): number;
    get cellHeight(): number;
}
